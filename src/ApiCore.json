{
  "openapi": "3.0.1",
  "info": {
    "title": "CardanoBI API",
    "description": "A fully open-source Business Intelligence API for Cardano.",
    "termsOfService": "https://example.com/terms",
    "contact": {
      "name": "Example Contact",
      "url": "https://example.com/contact"
    },
    "license": {
      "name": "Example License",
      "url": "https://example.com/license"
    },
    "version": "v1"
  },
  "paths": {
    "/api/core/accounts/{stake_address}": {
      "get": {
        "tags": [
          "Core",
          "Accounts"
        ],
        "summary": "One account by stake address.",
        "description": "Returns on-chain information about an account given its stake address.",
        "parameters": [
          {
            "name": "stake_address",
            "in": "path",
            "description": "Bech32 Stake address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/accounts/{stake_address}/rewards": {
      "get": {
        "tags": [
          "Core",
          "Accounts",
          "Rewards"
        ],
        "summary": "Rewards history.",
        "description": "Returns the earned rewards history of one account given its stake address.",
        "parameters": [
          {
            "name": "stake_address",
            "in": "path",
            "description": "Bech32 Stake address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which order the rewards are returned - \"desc\" descending (default) from newest to oldest - \"asc\" ascending from oldest to newest",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountRewardDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/accounts/{stake_address}/staking": {
      "get": {
        "tags": [
          "Core",
          "Accounts",
          "Staking"
        ],
        "summary": "Account staking history.",
        "description": "Returns the staking history of one account given its stake address.",
        "parameters": [
          {
            "name": "stake_address",
            "in": "path",
            "description": "Bech32 Stake address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which order the staking events are returned - \"desc\" descending (default) from newest to oldest - \"asc\" ascending from oldest to newest",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountStakingDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/accounts/{stake_address}/delegations": {
      "get": {
        "tags": [
          "Core",
          "Accounts",
          "Delegations"
        ],
        "summary": "Account delegation history.",
        "description": "Returns the delegation history of one account given its stake address.",
        "parameters": [
          {
            "name": "stake_address",
            "in": "path",
            "description": "Bech32 Stake address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which order the delegation events are returned - \"desc\" descending (default) from newest to oldest - \"asc\" ascending from oldest to newest",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDelegationDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/accounts/{stake_address}/registrations": {
      "get": {
        "tags": [
          "Core",
          "Accounts",
          "Registrations"
        ],
        "summary": "Account registration history.",
        "description": "Returns the registration history of one account given its stake address.",
        "parameters": [
          {
            "name": "stake_address",
            "in": "path",
            "description": "Bech32 Stake address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which order the registration events are returned - \"desc\" descending (default) from newest to oldest - \"asc\" ascending from oldest to newest",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountRegistrationDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/accounts/{stake_address}/withdrawals": {
      "get": {
        "tags": [
          "Core",
          "Accounts",
          "Withdrawals"
        ],
        "summary": "Account withdrawal history.",
        "description": "Returns the withdrawal history from one account given its stake address.",
        "parameters": [
          {
            "name": "stake_address",
            "in": "path",
            "description": "Bech32 Stake address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which order the withdrawal events are returned - \"desc\" descending (default) from newest to oldest - \"asc\" ascending from oldest to newest",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountWithdrawalDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/accounts/{stake_address}/mirs": {
      "get": {
        "tags": [
          "Core",
          "Accounts",
          "MIRs"
        ],
        "summary": "Move Instantaneous Rewards (MIR) history.",
        "description": "Returns the MIR history of one account given its stake address.",
        "parameters": [
          {
            "name": "stake_address",
            "in": "path",
            "description": "Bech32 Stake address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which order the MIR events are returned - \"desc\" descending (default) from newest to oldest - \"asc\" ascending from oldest to newest",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountMIRDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/accounts/{stake_address}/addresses": {
      "get": {
        "tags": [
          "Core",
          "Accounts",
          "Addresses"
        ],
        "summary": "Account associated addresses.",
        "description": "Returns all addresses associated to one account given its stake address.",
        "parameters": [
          {
            "name": "stake_address",
            "in": "path",
            "description": "Bech32 Stake address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which alphabetical order addresses are returned - \"desc\" descending (default) - \"asc\" ascending",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAddressDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/accounts/{stake_address}/assets": {
      "get": {
        "tags": [
          "Core",
          "Accounts",
          "Assets"
        ],
        "summary": "Account assets holdings.",
        "description": "Returns all assets held by one account given its stake address.",
        "parameters": [
          {
            "name": "stake_address",
            "in": "path",
            "description": "Bech32 Stake address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which alphabetical order the asset holdings are returned - \"desc\" descending (default) - \"asc\" ascending",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAssetDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/addresses/{address}/info": {
      "get": {
        "tags": [
          "Core",
          "Addresses",
          "Info"
        ],
        "summary": "One address information.",
        "description": "Returns useful information for one given payment address or all payment addresses linked to a given stake address.",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "A payment address or a stake address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/addressesinfo/{address}": {
      "get": {
        "tags": [
          "Core",
          "Addresses",
          "Info"
        ],
        "summary": "One address information.",
        "description": "Returns useful information for one given payment address or all payment addresses linked to a given stake address.",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "A payment address or a stake address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/bi/addresses/{stake_address}/stats": {
      "get": {
        "tags": [
          "BI",
          "Addresses",
          "Stats"
        ],
        "summary": "One stake address stats per epoch.",
        "description": "Returns statistics for one given stake address and for all epochs.",
        "parameters": [
          {
            "name": "stake_address",
            "in": "path",
            "description": "Stake address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressStat"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/bi/addresses/stats/epochs/{epoch_no}": {
      "get": {
        "tags": [
          "BI",
          "Addresses",
          "Stats"
        ],
        "summary": "All stake addresses stats for one epoch.",
        "description": "Returns all stake addresses statistics for one given epoch.",
        "parameters": [
          {
            "name": "epoch_no",
            "in": "path",
            "description": "Epoch number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressStat"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/bi/odata/addressesstats": {
      "get": {
        "tags": [
          "BI",
          "Addresses",
          "Stats"
        ],
        "summary": "One stake address stats per epoch.",
        "description": "Returns statistics for one given stake address and for all epochs.",
        "parameters": [
          {
            "name": "stake_address",
            "in": "query",
            "description": "Stake address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "epoch_no",
            "in": "query",
            "description": "Epoch number",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressStat"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/assets": {
      "get": {
        "tags": [
          "Core",
          "Assets"
        ],
        "summary": "All assets.",
        "description": "Returns the list of multi assets minted on Cardano.",
        "parameters": [
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which order assets are returned - \"desc\" descending (default) from newest to oldest - \"asc\" ascending from oldest to newest",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetListDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/assets/{fingerprint}": {
      "get": {
        "tags": [
          "Core",
          "Assets"
        ],
        "summary": "One asset.",
        "description": "Returns the details of one multi asset minted on Cardano given its fingerprint.",
        "parameters": [
          {
            "name": "fingerprint",
            "in": "path",
            "description": "The CIP14 fingerprint for the MultiAsset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDetailsDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/assets/{fingerprint}/history": {
      "get": {
        "tags": [
          "Core",
          "Assets",
          "History"
        ],
        "summary": "Asset history.",
        "description": "Returns the minting/burning history of one MultiAsset given its fingerprint.",
        "parameters": [
          {
            "name": "fingerprint",
            "in": "path",
            "description": "The CIP14 fingerprint for the MultiAsset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which order the minting/burning events are returned - \"desc\" descending (default) from newest to oldest - \"asc\" ascending from oldest to newest",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetHistoryDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/assets/{fingerprint}/transactions": {
      "get": {
        "tags": [
          "Core",
          "Assets",
          "Transactions"
        ],
        "summary": "Asset transactions.",
        "description": "Returns details of transactions involving one MultiAsset given its fingerprint.",
        "parameters": [
          {
            "name": "fingerprint",
            "in": "path",
            "description": "The CIP14 fingerprint for the MultiAsset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which order transactions are returned - \"desc\" descending (default) from newest to oldest - \"asc\" ascending from oldest to newest",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTransactionDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/assets/{fingerprint}/addresses": {
      "get": {
        "tags": [
          "Core",
          "Assets",
          "Addresses"
        ],
        "summary": "Asset addresses.",
        "description": "Returns the list of addresses holding a balance in one specific MultiAsset given its fingerprint.",
        "parameters": [
          {
            "name": "fingerprint",
            "in": "path",
            "description": "The CIP14 fingerprint for the MultiAsset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which order addresses are returned - \"desc\" descending (default) quantity held - \"asc\" ascending quantity held",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetAddressDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/assets/policies/{policy_hash}": {
      "get": {
        "tags": [
          "Core",
          "Assets"
        ],
        "summary": "Asset list by policy.",
        "description": "Returns the list of MultiAsset for a specific policy given its hash.",
        "parameters": [
          {
            "name": "policy_hash",
            "in": "path",
            "description": "The MultiAsset policy hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetPolicyDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/blocks/latest": {
      "get": {
        "tags": [
          "Core",
          "Blocks"
        ],
        "summary": "Latest block.",
        "description": "Returns the latest block i.e. the tip of the blockchain.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/blocks/{block_no}": {
      "get": {
        "tags": [
          "Core",
          "Blocks"
        ],
        "summary": "One block by block number.",
        "description": "Returns one specific block given its number.",
        "parameters": [
          {
            "name": "block_no",
            "in": "path",
            "description": "Block number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/blocks/{block_hash}": {
      "get": {
        "tags": [
          "Core",
          "Blocks"
        ],
        "summary": "One block by block hash.",
        "description": "Returns one specific block given its hash.",
        "parameters": [
          {
            "name": "block_hash",
            "in": "path",
            "description": "Block hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/blocks/epochs/{epoch_no}/slots/{slot_no}": {
      "get": {
        "tags": [
          "Core",
          "Blocks"
        ],
        "summary": "One block by epoch and slot number.",
        "description": "Returns one specific block given its epoch and slot numbers.",
        "parameters": [
          {
            "name": "epoch_no",
            "in": "path",
            "description": "Epoch number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "slot_no",
            "in": "path",
            "description": "Slot number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/blocks/history": {
      "get": {
        "tags": [
          "Core",
          "Blocks",
          "History"
        ],
        "summary": "Block history.",
        "description": "Returns the history of blocks starting from the latest block.",
        "parameters": [
          {
            "name": "block_no",
            "in": "query",
            "description": "Block number to search from - defaults to the latest known block",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "Number of blocks to return - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Block"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/blocks/history/prev/{block_no}": {
      "get": {
        "tags": [
          "Core",
          "Blocks",
          "History"
        ],
        "summary": "Block preceding history.",
        "description": "Returns the history of blocks preceding a given block number.",
        "parameters": [
          {
            "name": "block_no",
            "in": "path",
            "description": "Block number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "Number of blocks to return - defaults to 5 - max 20",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Block"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/blocks/history/next/{block_no}": {
      "get": {
        "tags": [
          "Core",
          "Blocks",
          "History"
        ],
        "summary": "Block following history.",
        "description": "Returns the history of blocks following a given block number.",
        "parameters": [
          {
            "name": "block_no",
            "in": "path",
            "description": "Block number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "Number of blocks to return - defaults to 5 - max 20",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Block"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/blocks/latest/pools/{pool_hash}": {
      "get": {
        "tags": [
          "Core",
          "Blocks",
          "Pools"
        ],
        "summary": "Latest block for a given pool.",
        "description": "Returns the latest block forged by a pool given its pool identifier.",
        "parameters": [
          {
            "name": "pool_hash",
            "in": "path",
            "description": "The Bech32 or HEX encoding of the pool hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/blocks/pools/{pool_hash}/history": {
      "get": {
        "tags": [
          "Core",
          "Blocks",
          "Pools"
        ],
        "summary": "Block history for a given pool.",
        "description": "Returns the history of blocks forged by a pool given its pool identifier.",
        "parameters": [
          {
            "name": "pool_hash",
            "in": "path",
            "description": "The Bech32 or HEX encoding of the pool hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Block"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/blocks/latest/transactions": {
      "get": {
        "tags": [
          "Core",
          "Blocks",
          "Transactions"
        ],
        "summary": "Latest block transactions.",
        "description": "Returns the transactions within the latest block i.e. the tip of the blockchain.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/blocks/{block_no}/transactions": {
      "get": {
        "tags": [
          "Core",
          "Blocks",
          "Transactions"
        ],
        "summary": "Transactions for a given block by block number.",
        "description": "Returns the transactions within one specific block given its number.",
        "parameters": [
          {
            "name": "block_no",
            "in": "path",
            "description": "Block number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/blocks/{block_hash}/transactions": {
      "get": {
        "tags": [
          "Core",
          "Blocks",
          "Transactions"
        ],
        "summary": "Transactions for a given block by block hash.",
        "description": "Returns the transactions within one specific block given its hash.",
        "parameters": [
          {
            "name": "block_hash",
            "in": "path",
            "description": "Block hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/blocks": {
      "get": {
        "tags": [
          "Core",
          "Blocks",
          "History"
        ],
        "summary": "Block history.",
        "description": "Returns the history of blocks starting from the latest block.",
        "parameters": [
          {
            "name": "block_no",
            "in": "query",
            "description": "Block number to search from - defaults to the latest known block",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "Number of blocks to return - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Block"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/epochs/latest": {
      "get": {
        "tags": [
          "Core",
          "Epochs"
        ],
        "summary": "Latest epoch.",
        "description": "Returns info about the latest epoch.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Epoch"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/epochs": {
      "get": {
        "tags": [
          "Core",
          "Epochs"
        ],
        "summary": "All epochs.",
        "description": "Returns all epoch entities.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Epoch"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/epochs/{epoch_no}": {
      "get": {
        "tags": [
          "Core",
          "Epochs"
        ],
        "summary": "One epoch by number.",
        "description": "Returns one specific epoch given its number.",
        "parameters": [
          {
            "name": "epoch_no",
            "in": "path",
            "description": "Epoch number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Epoch"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/epochs": {
      "get": {
        "tags": [
          "Core",
          "Epochs"
        ],
        "summary": "All epochs.",
        "description": "Returns all epoch entities.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Epoch"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/epochs/{epoch_no}": {
      "get": {
        "tags": [
          "Core",
          "Epochs"
        ],
        "summary": "One epoch by number.",
        "description": "Returns one specific epoch given its number.",
        "parameters": [
          {
            "name": "epoch_no",
            "in": "path",
            "description": "Epoch number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Epoch"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/epochs/params/latest": {
      "get": {
        "tags": [
          "Core",
          "Epochs",
          "Parameters"
        ],
        "summary": "Latest epoch params.",
        "description": "Returns the parameters for the latest epoch.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EpochParam"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/epochs/params": {
      "get": {
        "tags": [
          "Core",
          "Epochs",
          "Parameters"
        ],
        "summary": "All epoch params.",
        "description": "Returns the parameters for all epoch.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EpochParam"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/epochs/{epoch_no}/params": {
      "get": {
        "tags": [
          "Core",
          "Epochs",
          "Parameters"
        ],
        "summary": "One epoch params by number.",
        "description": "Returns the parameters of one specific epoch given its number.",
        "parameters": [
          {
            "name": "epoch_no",
            "in": "path",
            "description": "Epoch number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EpochParam"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/epochsparams": {
      "get": {
        "tags": [
          "Core",
          "Epochs",
          "Parameters"
        ],
        "summary": "All epoch params.",
        "description": "Returns the parameters for all epoch.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EpochParam"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/epochsparams/{epoch_no}": {
      "get": {
        "tags": [
          "Core",
          "Epochs",
          "Parameters"
        ],
        "summary": "One epoch params by number.",
        "description": "Returns the parameters of one specific epoch given its number.",
        "parameters": [
          {
            "name": "epoch_no",
            "in": "path",
            "description": "Epoch number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EpochParam"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/epochs/stakes/pools/{pool_hash}": {
      "get": {
        "tags": [
          "Core",
          "Epochs",
          "Stakes"
        ],
        "summary": "One pool stake distributions.",
        "description": "Returns the stake distribution for one pool across all epochs given its Bech32 pool hash.",
        "parameters": [
          {
            "name": "pool_hash",
            "in": "path",
            "description": "Bech32 pool hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EpochStakeView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/epochs/{epoch_no}/stakes/pools/{pool_hash}": {
      "get": {
        "tags": [
          "Core",
          "Epochs",
          "Stakes"
        ],
        "summary": "One epoch and one pool stake distributions.",
        "description": "Returns the stake distribution for one epoch given its number, and for one pool given its Bech32 pool hash.",
        "parameters": [
          {
            "name": "epoch_no",
            "in": "path",
            "description": "Epoch number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pool_hash",
            "in": "path",
            "description": "Bech32 pool hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EpochStakeView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/epochs/latest/stakes/pools/{pool_hash}": {
      "get": {
        "tags": [
          "Core",
          "Epochs",
          "Stakes"
        ],
        "summary": "Latest epoch and one pool stake distributions.",
        "description": "Returns the stake distribution for the latest epoch, and for one pool given its Bech32 pool hash.",
        "parameters": [
          {
            "name": "pool_hash",
            "in": "path",
            "description": "Bech32 pool hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EpochStakeView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/epochsstakes": {
      "get": {
        "tags": [
          "Core",
          "Epochs",
          "Stakes"
        ],
        "summary": "One epoch and one pool stake distributions.",
        "description": "Returns the stake distribution for one epoch given its number, and for one pool given its Bech32 pool hash.",
        "parameters": [
          {
            "name": "epoch_no",
            "in": "query",
            "description": "Epoch number",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pool_hash",
            "in": "query",
            "description": "Bech32 pool hash",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EpochStakeView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/$metadata": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "operationId": "api/core/odata/$metadata",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/bi/odata/$metadata": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "operationId": "api/bi/odata/$metadata",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IEdmModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/odata": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "operationId": "api/core/odata/",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              }
            }
          }
        }
      }
    },
    "/api/bi/odata": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "operationId": "api/bi/odata/",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ODataServiceDocument"
                }
              }
            }
          }
        }
      }
    },
    "/api/core/polls": {
      "get": {
        "tags": [
          "Core",
          "Polls"
        ],
        "summary": "All polls.",
        "description": "Returns the list of all polls defined on chain.",
        "parameters": [
          {
            "name": "page_no",
            "in": "query",
            "description": "Page number to retrieve - defaults to 1",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page - defaults to 20 - max 100",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Prescribes in which order results are returned - \"desc\" descending (default) from newest to oldest - \"asc\" ascending from oldest to newest",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollOverviewDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/polls/{poll_hash}": {
      "get": {
        "tags": [
          "Core",
          "Polls"
        ],
        "summary": "One poll full details by hash.",
        "description": "Returns on-chain information about a poll given the hash of its question.",
        "parameters": [
          {
            "name": "poll_hash",
            "in": "path",
            "description": "The HEX encoding of the poll's hash (e.g. the hash of the poll's question).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/hashes": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Hashes"
        ],
        "summary": "All pool key hash.",
        "description": "Returns every unique pool key hash.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolHash"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/poolshashes": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Hashes"
        ],
        "summary": "All pool key hash.",
        "description": "Returns every unique pool key hash.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolHash"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/metadata": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Metadata"
        ],
        "summary": "All pool metadata.",
        "description": "Returns all on-chain references to off-chain pool metadata.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolMetadata"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/{pool_id}/metadata": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Metadata"
        ],
        "summary": "One pool metadata by pool id.",
        "description": "Returns the on-chain references to off-chain pool metadata for one pool given its unique identifier.",
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "description": "Pool unique identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolMetadata"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/metadata/hashes/{meta_hash}": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Metadata"
        ],
        "summary": "One pool metadata by pool metadata hash.",
        "description": "Returns the on-chain references to off-chain pool metadata for one pool given its metadata hash.",
        "parameters": [
          {
            "name": "meta_hash",
            "in": "path",
            "description": "Pool metadata hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolMetadata"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/poolsmetadata": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Metadata"
        ],
        "summary": "All pool metadata.",
        "description": "Returns all on-chain references to off-chain pool metadata.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolMetadata"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/poolsmetadata/{pool_id}": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Metadata"
        ],
        "summary": "One pool metadata by pool id.",
        "description": "Returns the on-chain references to off-chain pool metadata for one pool given its unique identifier.",
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "description": "Pool unique identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolMetadata"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/offlinedata": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "OfflineData"
        ],
        "summary": "All pool offline data.",
        "description": "Returns all pool offline (ie not on chain) data.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolOfflineData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/{pool_id}/offlinedata": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "OfflineData"
        ],
        "summary": "One pool offline data by pool id.",
        "description": "Returns the offline (ie not on chain) data for one pool given its unique identifier.",
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "description": "Pool unique identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolOfflineData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/{ticker}/offlinedata": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "OfflineData"
        ],
        "summary": "One pool offline data by pool ticker.",
        "description": "Returns the offline (ie not on chain) data for one pool given its ticker.",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "description": "Pool ticker",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolOfflineData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/metadata/{meta_hash}/offlinedata": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "OfflineData"
        ],
        "summary": "One pool offline data by pool metadata hash.",
        "description": "Returns the offline (ie not on chain) data for one pool given its metadata hash.",
        "parameters": [
          {
            "name": "meta_hash",
            "in": "path",
            "description": "Pool metadata hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolOfflineData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/poolsofflinedata": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "OfflineData"
        ],
        "summary": "All pool offline data.",
        "description": "Returns all pool offline (ie not on chain) data.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolOfflineData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/poolsofflinedata/{pool_id}": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "OfflineData"
        ],
        "summary": "One pool offline data by pool id.",
        "description": "Returns the offline (ie not on chain) data for one pool given its unique identifier.",
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "description": "Pool unique identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolOfflineData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/offlinefetcherrors": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "FetchErrors"
        ],
        "summary": "All pool offline fetch errors.",
        "description": "Returns all pool offline fetch errors.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolOfflineFetchError"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/{pool_id}/offlinefetcherrors": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "FetchErrors"
        ],
        "summary": "One pool offline fetch errors by pool id.",
        "description": "Returns the offline fetch errors for one pool given its unique identifier.",
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "description": "Pool unique identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolOfflineFetchError"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/poolsofflinefetcherrors": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "FetchErrors"
        ],
        "summary": "All pool offline fetch errors.",
        "description": "Returns all pool offline fetch errors.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolOfflineFetchError"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/poolsofflinefetcherrors/{pool_id}": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "FetchErrors"
        ],
        "summary": "One pool offline fetch errors by pool id.",
        "description": "Returns the offline fetch errors for one pool given its unique identifier.",
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "description": "Pool unique identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolOfflineFetchError"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/relays/updates": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Relays"
        ],
        "summary": "All relays.",
        "description": "Returns all pool relays.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolRelay"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/relays/updates/{update_id}": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Relays"
        ],
        "summary": "One pool relays by pool update unique identifier.",
        "description": "Returns the relays for one pool given a pool update unique identifier.",
        "parameters": [
          {
            "name": "update_id",
            "in": "path",
            "description": "The pool update unique identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolRelay"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/{vrf_key_hash}/relays/updates": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Relays"
        ],
        "summary": "One pool relays by VRF key hash.",
        "description": "Returns the relays for one pool given its VRF key hash.",
        "parameters": [
          {
            "name": "vrf_key_hash",
            "in": "path",
            "description": "The pool VRF key in HEX format.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolRelay"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/poolsrelays": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Relays"
        ],
        "summary": "All relays.",
        "description": "Returns all pool relays.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolRelay"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/poolsrelays/{update_id}": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Relays"
        ],
        "summary": "One pool relays by pool update unique identifier.",
        "description": "Returns the relays for one pool given a pool update unique identifier.",
        "parameters": [
          {
            "name": "update_id",
            "in": "path",
            "description": "The pool update unique identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolRelay"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/bi/pools/stats/epochs/{epoch_no}": {
      "get": {
        "tags": [
          "BI",
          "Pools",
          "Stats"
        ],
        "summary": "All pools statistics per epoch.",
        "description": "Pools activity statistics per epoch number.",
        "parameters": [
          {
            "name": "epoch_no",
            "in": "path",
            "description": "Epoch number.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolStat"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/bi/pools/{pool_hash}/stats": {
      "get": {
        "tags": [
          "BI",
          "Pools",
          "Stats"
        ],
        "summary": "One pool statistics per epoch.",
        "description": "Pool activity statistics for a given pool per epoch number.",
        "parameters": [
          {
            "name": "pool_hash",
            "in": "path",
            "description": "The Bech32 encoding of a given pool hash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolStat"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/bi/odata/poolsstats": {
      "get": {
        "tags": [
          "BI",
          "Pools",
          "Stats"
        ],
        "summary": "All pools statistics per epoch.",
        "description": "Pools activity statistics per epoch number.",
        "parameters": [
          {
            "name": "epoch_no",
            "in": "query",
            "description": "Epoch number",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pool_hash",
            "in": "query",
            "description": "The Bech32 encoding of a given pool hash",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolStat"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/updates": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Updates"
        ],
        "summary": "All on-chain pool updates.",
        "description": "Returns all on-chain pool updates.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolUpdate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/{pool_id}/updates": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Updates"
        ],
        "summary": "One pool on-chain updates.",
        "description": "Returns the on-chain updates for one pool given its unique identifier.",
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "description": "Pool unique identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolUpdate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/pools/{vrf_key_hash}/updates": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Updates"
        ],
        "summary": "One pool on-chain updates.",
        "description": "Returns the on-chain updates for one pool given its VRF key hash.",
        "parameters": [
          {
            "name": "vrf_key_hash",
            "in": "path",
            "description": "The pool VRF key in HEX format.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolUpdate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/poolsupdates": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Updates"
        ],
        "summary": "All on-chain pool updates.",
        "description": "Returns all on-chain pool updates.",
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolUpdate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/odata/poolsupdates/{pool_id}": {
      "get": {
        "tags": [
          "Core",
          "Pools",
          "Updates"
        ],
        "summary": "One pool on-chain updates.",
        "description": "Returns the on-chain updates for one pool given its unique identifier.",
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "description": "Pool unique identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PoolUpdate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}": {
      "get": {
        "tags": [
          "Core",
          "Transactions"
        ],
        "summary": "Details of a given transaction.",
        "description": "Returns details of a transaction given its hash.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}/utxos": {
      "get": {
        "tags": [
          "Core",
          "Transactions"
        ],
        "summary": "Inputs and Unspent Outputs of a given transaction.",
        "description": "Returns all Inputs and Unspent Outputs (UTXOs) of a transaction given its hash.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionUtxoDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}/stake_address_registrations": {
      "get": {
        "tags": [
          "Core",
          "Transactions",
          "Certificates"
        ],
        "summary": "Stake address certificate transactions.",
        "description": "Returns details of a transaction used to register a stake address given its hash.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionStakeAddressDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}/stake_address_delegations": {
      "get": {
        "tags": [
          "Core",
          "Transactions",
          "Certificates"
        ],
        "summary": "Stake address delegation transactions.",
        "description": "Returns details of a transaction used to delegate a given stake address to a pool.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionStakeAddressDelegationDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}/withdrawals": {
      "get": {
        "tags": [
          "Core",
          "Transactions",
          "Withdrawals"
        ],
        "summary": "Reward account withdrawal transactions.",
        "description": "Returns details of a transaction used to withdraw rewards given its staked address.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionStakeAddressWithdrawalDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}/treasury": {
      "get": {
        "tags": [
          "Core",
          "Transactions",
          "Pots"
        ],
        "summary": "Transactions for treasury payments to a stake address.",
        "description": "Returns details of a transaction used for payments between the treasury and a stake address.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionTreasuryDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}/reserves": {
      "get": {
        "tags": [
          "Core",
          "Transactions",
          "Pots"
        ],
        "summary": "Transactions for reserves payments to a stake address.",
        "description": "Returns details of a transaction used for payments between the reserves and a stake address.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionTreasuryDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}/param_proposals": {
      "get": {
        "tags": [
          "Core",
          "Transactions",
          "Blockchain"
        ],
        "summary": "Transactions for block chain parameter change proposals.",
        "description": "Returns details of a transaction used for block chain parameter change proposals.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParamProposal"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}/retiring_pools": {
      "get": {
        "tags": [
          "Core",
          "Transactions",
          "Certificates"
        ],
        "summary": "Pool retirement transactions.",
        "description": "Returns details of a transaction used to retire a stake pool.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRetiringPoolDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}/updating_pools": {
      "get": {
        "tags": [
          "Core",
          "Transactions",
          "Certificates"
        ],
        "summary": "On-chain pool update transactions.",
        "description": "Returns details of a transaction used to update a stake pool.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionUpdatingPoolDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}/metadata": {
      "get": {
        "tags": [
          "Core",
          "Transactions",
          "Metadata"
        ],
        "summary": "Metadata attached to a transaction.",
        "description": "Returns the metadata attached to a transaction given its hash.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionMetadataDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}/assetmints": {
      "get": {
        "tags": [
          "Core",
          "Transactions",
          "Assets"
        ],
        "summary": "Multi-asset mint events attached to a transaction.",
        "description": "Returns the details of a multi-asset mint event attached to a transaction given its hash.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MultiAssetTransactionMintDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    },
    "/api/core/transactions/{transaction_hash}/redeemers": {
      "get": {
        "tags": [
          "Core",
          "Transactions",
          "Contracts"
        ],
        "summary": "Redeemers attached to a transaction.",
        "description": "Returns redeemers information attached to a transaction given its hash.",
        "parameters": [
          {
            "name": "transaction_hash",
            "in": "path",
            "description": "The transaction hash.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RedeemerDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request was unacceptable, often due to missing a required parameter."
          },
          "401": {
            "description": "Unauthorized: No valid API key provided."
          },
          "402": {
            "description": "Quota Exceeded: This API key has reached its usage limit on request."
          },
          "403": {
            "description": "Access Denied: The request is missing a valid API key or token."
          },
          "404": {
            "description": "Not Found: The requested resource cannot be found."
          },
          "429": {
            "description": "Too Many Requests: This API key has reached its rate limit."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountAddressDTO": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The human readable encoding of the associated address. Will be Base58 for Byron era addresses and Bech32 for Shelley era.",
            "nullable": true
          },
          "address_has_script": {
            "type": "boolean",
            "description": "Flag which shows if this address is locked by a script."
          }
        },
        "additionalProperties": false
      },
      "AccountAssetDTO": {
        "type": "object",
        "properties": {
          "policy_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the MultiAsset policy hash.",
            "nullable": true
          },
          "fingerprint": {
            "type": "string",
            "description": "The CIP14 fingerprint for the MultiAsset.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The MultiAsset name.",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The balance of the given MultiAsset held by the account.",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AccountDelegationDTO": {
        "type": "object",
        "properties": {
          "epoch_no": {
            "type": "integer",
            "description": "The epoch number in which the given delegation was active.",
            "format": "int64"
          },
          "tx_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the delegation transaction.",
            "nullable": true
          },
          "pool_id": {
            "type": "string",
            "description": "The Bech32 encoding of the pool being delegated to.",
            "nullable": true
          },
          "slot_no": {
            "type": "integer",
            "description": "The slot number for this delegation.",
            "format": "int64"
          },
          "block_no": {
            "type": "integer",
            "description": "The block number for this delegation.",
            "format": "int64"
          },
          "block_time": {
            "type": "string",
            "description": "The block time (UTCTime) for this delegation.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AccountInfoDTO": {
        "type": "object",
        "properties": {
          "stake_address": {
            "type": "string",
            "description": "The Bech32 encoded version of the account's stake address",
            "nullable": true
          },
          "is_registered": {
            "type": "boolean",
            "description": "Boolean flag indicating if the account is registered (true) or deregistered (false) on-chain.",
            "nullable": true
          },
          "last_reg_dereg_tx": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the last registration/deregistration transaction for this account.",
            "nullable": true
          },
          "last_reg_dereg_epoch_no": {
            "type": "number",
            "description": "Epoch number when the account was last registered/deregistered.",
            "format": "double",
            "nullable": true
          },
          "pool_id": {
            "type": "string",
            "description": "The Bech32 encoding of the pool hash this account is delegated to.",
            "nullable": true
          },
          "last_deleg_tx": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the last delegation transaction for this account.",
            "nullable": true
          },
          "delegated_since_epoch_no": {
            "type": "number",
            "description": "Epoch number when the current delegation became active for this account.",
            "format": "double",
            "nullable": true
          },
          "total_balance": {
            "type": "number",
            "description": "The total ADA balance of this account, e.g. controlled stakes + available rewards.",
            "format": "double",
            "nullable": true
          },
          "controlled_stakes": {
            "type": "number",
            "description": "The total ADA stakes controlled by this account.",
            "format": "double",
            "nullable": true
          },
          "total_rewards": {
            "type": "number",
            "description": "The total historical ADA rewards earned by this account.",
            "format": "double",
            "nullable": true
          },
          "total_withdrawals": {
            "type": "number",
            "description": "The total historical ADA rewards withdrew from this account.",
            "format": "double",
            "nullable": true
          },
          "available_rewards": {
            "type": "number",
            "description": "The available ADA rewards for this account.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountMIRDTO": {
        "type": "object",
        "properties": {
          "epoch_no": {
            "type": "integer",
            "description": "The epoch number in which the given MIR occured.",
            "format": "int64"
          },
          "block_no": {
            "type": "integer",
            "description": "The block number for this MIR.",
            "format": "int64"
          },
          "tx_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the MIR transaction.",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "description": "The MIR amount (in Lovelace).",
            "format": "int64"
          },
          "mir_type": {
            "type": "string",
            "description": "The source of the MIR payment (treasury or reserve).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountRegistrationDTO": {
        "type": "object",
        "properties": {
          "epoch_no": {
            "type": "integer",
            "description": "The epoch number in which the given registration event occured.",
            "format": "int64"
          },
          "block_no": {
            "type": "integer",
            "description": "The block number for this registration event.",
            "format": "int64"
          },
          "tx_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the registration transaction.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state of the given account following this registration event.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountRewardDTO": {
        "type": "object",
        "properties": {
          "earned_epoch": {
            "type": "integer",
            "description": "The epoch in which the reward was earned. For pool and leader rewards spendable in epoch N, this will be N - 2, for treasury and reserves N - 1 and for refund N.",
            "format": "int64"
          },
          "spendable_epoch": {
            "type": "integer",
            "description": "The epoch in which the reward is actually distributed and can be spent.",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "The source of the rewards; pool member, pool leader, treasury or reserves payment and pool deposits refunds",
            "nullable": true
          },
          "pool_id_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of hash for the pool the stake address was delegated to when the reward is earned or for the pool that there is a deposit refund. Will be NULL for payments from the treasury or the reserves.",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "description": "The reward amount (in Lovelace).",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AccountStakingDTO": {
        "type": "object",
        "properties": {
          "epoch_no": {
            "type": "integer",
            "description": "The epoch number in which the given stake was active.",
            "format": "int32"
          },
          "amount": {
            "type": "integer",
            "format": "int64"
          },
          "pool_id": {
            "type": "string",
            "description": "The Bech32 encoding of the pool being delegated to.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountWithdrawalDTO": {
        "type": "object",
        "properties": {
          "tx_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the withdrawal transaction.",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "description": "The withdrawal amount (in Lovelace).",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AddressInfo": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The address.",
            "nullable": true
          },
          "stake_address_id": {
            "type": "integer",
            "description": "The stake addres unique identifier.",
            "format": "int64",
            "nullable": true
          },
          "stake_address": {
            "type": "string",
            "description": "The stake address.",
            "nullable": true
          },
          "script_hash": {
            "type": "string",
            "description": "The script hash in HEX form in case this address is locked by a script.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressStat": {
        "type": "object",
        "properties": {
          "epoch_no": {
            "type": "integer",
            "description": "The epoch number.",
            "format": "int32",
            "nullable": true
          },
          "stake_address": {
            "type": "string",
            "description": "The stake address.",
            "nullable": true
          },
          "tx_count": {
            "type": "integer",
            "description": "The transaction count.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetAddressDTO": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The output address holding a balance in the given Multi-Asset.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "The balance held at this address of the given MultiAsset.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AssetDetailsDTO": {
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "integer",
            "description": "The MultiAsset unique identifier.",
            "format": "int64"
          },
          "fingerprint": {
            "type": "string",
            "description": "The CIP14 fingerprint for the MultiAsset.",
            "nullable": true
          },
          "policy_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the MultiAsset policy hash.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The MultiAsset name.",
            "nullable": true
          },
          "creation_time": {
            "type": "string",
            "description": "The MultiAsset creation time (first minting event time).",
            "format": "date-time"
          },
          "total_supply": {
            "type": "number",
            "description": "The MultiAsset total circulating supply.",
            "format": "double"
          },
          "mint_cnt": {
            "type": "integer",
            "description": "The number of mint events for this MultiAsset.",
            "format": "int64"
          },
          "burn_cnt": {
            "type": "integer",
            "description": "The number of burn events for this MultiAsset.",
            "format": "int64"
          },
          "first_mint_tx_hash": {
            "type": "string",
            "description": "The hash for the transaction that contains the first minting event for this MultiAsset.",
            "nullable": true
          },
          "first_mint_keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The metadata keys used in the first mint event for this MultiAsset.",
            "nullable": true
          },
          "last_mint_tx_hash": {
            "type": "string",
            "description": "The hash for the transaction that contains the last minting event for this MultiAsset.",
            "nullable": true
          },
          "last_mint_keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The metadata keys used in the last mint event for this MultiAsset.",
            "nullable": true
          },
          "first_mint_metadata": {
            "type": "string",
            "description": "The JSON payload of the first mint event for this MultiAsset.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetHistoryDTO": {
        "type": "object",
        "properties": {
          "event_id": {
            "type": "integer",
            "description": "The Multi-Asset minting/buring event unique identifier.",
            "format": "int64"
          },
          "tx_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the transaction containing this event.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "The amount of the Multi Asset to mint (can be negative to \"burn\" assets).",
            "format": "double"
          },
          "event_time": {
            "type": "string",
            "description": "The event creation time (time of the block containing it).",
            "format": "date-time"
          },
          "block_no": {
            "type": "integer",
            "description": "The block number containing the minting/buring transaction for this event.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AssetListDTO": {
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "integer",
            "description": "The MultiAsset unique identifier.",
            "format": "int64"
          },
          "fingerprint": {
            "type": "string",
            "description": "The CIP14 fingerprint for the MultiAsset.",
            "nullable": true
          },
          "policy_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the MultiAsset policy hash.",
            "nullable": true
          },
          "total_supply": {
            "type": "number",
            "description": "The total supply of the Multi Asset.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AssetPolicyDTO": {
        "type": "object",
        "properties": {
          "fingerprint": {
            "type": "string",
            "description": "The CIP14 fingerprint for the MultiAsset.",
            "nullable": true
          },
          "total_supply": {
            "type": "number",
            "description": "The total supply of the Multi Asset.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AssetTransactionDTO": {
        "type": "object",
        "properties": {
          "tx_id": {
            "type": "integer",
            "description": "The transaction unique identifier.",
            "format": "int64"
          },
          "hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the transaction.",
            "nullable": true
          },
          "epoch_no": {
            "type": "integer",
            "description": "The epoch number.",
            "format": "int32"
          },
          "block_no": {
            "type": "integer",
            "description": "The block number containing the minting/buring transaction for this event.",
            "format": "int32"
          },
          "event_time": {
            "type": "string",
            "description": "The time (UTCTime) of the block containing this transaction.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Block": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The block unique identifier.",
            "format": "int64"
          },
          "hash": {
            "type": "string",
            "description": "The hash identifier of the block.",
            "format": "byte",
            "nullable": true
          },
          "epoch_no": {
            "type": "integer",
            "description": "The epoch number.",
            "format": "int32"
          },
          "slot_no": {
            "type": "integer",
            "description": "The slot number.",
            "format": "int64"
          },
          "epoch_slot_no": {
            "type": "integer",
            "description": "The slot number within an epoch (resets to zero at the start of each epoch).",
            "format": "int32"
          },
          "block_no": {
            "type": "integer",
            "description": "The block number.",
            "format": "int32"
          },
          "previous_id": {
            "type": "integer",
            "description": "The Block table index of the previous block.",
            "format": "int64"
          },
          "slot_leader_id": {
            "type": "integer",
            "description": "The SlotLeader table index of the creator of this block.",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "description": "The block size (in bytes). Note, this size value is not expected to be the same as the sum of the tx sizes due to the fact that txs being stored in segwit format and oddities in the CBOR encoding.",
            "format": "int32"
          },
          "time": {
            "type": "string",
            "description": "The block time (UTCTime).",
            "format": "date-time"
          },
          "tx_count": {
            "type": "integer",
            "description": "The number of transactions in this block.",
            "format": "int64"
          },
          "proto_major": {
            "type": "integer",
            "description": "The block's major protocol number.",
            "format": "int32"
          },
          "proto_minor": {
            "type": "integer",
            "description": "The block's major protocol number.",
            "format": "int32"
          },
          "vrf_key": {
            "type": "string",
            "description": "The VRF key of the creator of this block.",
            "nullable": true
          },
          "op_cert": {
            "type": "string",
            "description": "The hash of the operational certificate of the block producer.",
            "format": "byte",
            "nullable": true
          },
          "op_cert_counter": {
            "type": "integer",
            "description": "The value of the counter used to produce the operational certificate.",
            "format": "int64"
          },
          "hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the block hash.",
            "nullable": true
          },
          "op_cert_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the block producer operational certificate's hash.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EdmContainerElementKind": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "EdmExpressionKind": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25
        ],
        "type": "integer",
        "format": "int32"
      },
      "EdmSchemaElementKind": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "EdmTypeKind": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "format": "int32"
      },
      "Epoch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The epoch unique identifier.",
            "format": "int64"
          },
          "out_sum": {
            "type": "number",
            "description": "The sum of the transaction output values (in Lovelace) in this epoch.",
            "format": "double"
          },
          "fees": {
            "type": "number",
            "description": "The sum of the fees (in Lovelace) in this epoch.",
            "format": "double"
          },
          "tx_count": {
            "type": "integer",
            "description": "The number of transactions in this epoch.",
            "format": "int32"
          },
          "blk_count": {
            "type": "integer",
            "description": "The number of blocks in this epoch.",
            "format": "int32"
          },
          "no": {
            "type": "integer",
            "description": "The epoch number.",
            "format": "int32"
          },
          "start_time": {
            "type": "string",
            "description": "The epoch start time.",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "description": "The epoch end time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EpochParam": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The epoch param unique identifier.",
            "format": "int64"
          },
          "epoch_no": {
            "type": "integer",
            "description": "The first epoch for which these parameters are valid.",
            "format": "int32"
          },
          "min_fee_a": {
            "type": "integer",
            "description": "The 'a' parameter to calculate the minimum transaction fee.",
            "format": "int32"
          },
          "min_fee_b": {
            "type": "integer",
            "description": "The 'b' parameter to calculate the minimum transaction fee.",
            "format": "int32"
          },
          "max_block_size": {
            "type": "integer",
            "description": "The maximum block size (in bytes).",
            "format": "int32"
          },
          "max_tx_size": {
            "type": "integer",
            "description": "The maximum transaction size (in bytes).",
            "format": "int32"
          },
          "max_bh_size": {
            "type": "integer",
            "description": "The maximum block header size (in bytes).",
            "format": "int32"
          },
          "key_deposit": {
            "type": "number",
            "description": "The amount (in Lovelace) require for a deposit to register a StakeAddress.",
            "format": "double"
          },
          "pool_deposit": {
            "type": "number",
            "description": "The amount (in Lovelace) require for a deposit to register a stake pool.",
            "format": "double"
          },
          "max_epoch": {
            "type": "integer",
            "description": "The maximum number of epochs in the future that a pool retirement is allowed to be scheduled for.",
            "format": "int32"
          },
          "optimal_pool_count": {
            "type": "integer",
            "description": "The optimal number of stake pools.",
            "format": "int32"
          },
          "influence": {
            "type": "number",
            "description": "The influence of the pledge on a stake pool's probability on minting a block.",
            "format": "double"
          },
          "monetary_expand_rate": {
            "type": "number",
            "description": "The monetary expansion rate.",
            "format": "double"
          },
          "treasury_growth_rate": {
            "type": "number",
            "description": "The treasury growth rate.",
            "format": "double"
          },
          "decentralisation": {
            "type": "number",
            "description": "The decentralisation parameter (1 fully centralised, 0 fully decentralised).",
            "format": "double"
          },
          "protocol_major": {
            "type": "integer",
            "description": "The protocol major number.",
            "format": "int32"
          },
          "protocol_minor": {
            "type": "integer",
            "description": "The protocol minor number.",
            "format": "int32"
          },
          "min_utxo_value": {
            "type": "number",
            "description": "The minimum value of a UTxO entry.",
            "format": "double"
          },
          "min_pool_cost": {
            "type": "number",
            "description": "The minimum pool cost.",
            "format": "double"
          },
          "nonce": {
            "type": "string",
            "description": "The nonce value for this epoch.",
            "format": "byte",
            "nullable": true
          },
          "cost_model_id": {
            "type": "integer",
            "description": "The CostModel table index for the params.",
            "format": "int64",
            "nullable": true
          },
          "price_mem": {
            "type": "number",
            "description": "The per word cost of script memory usage.",
            "format": "double",
            "nullable": true
          },
          "price_step": {
            "type": "number",
            "description": "The cost of script execution step usage.",
            "format": "double",
            "nullable": true
          },
          "max_tx_ex_mem": {
            "type": "number",
            "description": "The maximum number of execution memory allowed to be used in a single transaction.",
            "format": "double",
            "nullable": true
          },
          "max_tx_ex_steps": {
            "type": "number",
            "description": "The maximum number of execution steps allowed to be used in a single transaction.",
            "format": "double",
            "nullable": true
          },
          "max_block_ex_mem": {
            "type": "number",
            "description": "The maximum number of execution memory allowed to be used in a single block.",
            "format": "double",
            "nullable": true
          },
          "max_block_ex_steps": {
            "type": "number",
            "description": "The maximum number of execution steps allowed to be used in a single block.",
            "format": "double",
            "nullable": true
          },
          "max_val_size": {
            "type": "number",
            "description": "The maximum Val size.",
            "format": "double",
            "nullable": true
          },
          "collateral_percent": {
            "type": "integer",
            "description": "The percentage of the txfee which must be provided as collateral when including non-native scripts.",
            "format": "int32",
            "nullable": true
          },
          "max_collateral_inputs": {
            "type": "integer",
            "description": "The maximum number of collateral inputs allowed in a transaction.",
            "format": "int32",
            "nullable": true
          },
          "block_id": {
            "type": "integer",
            "description": "The Block table index for the first block where these parameters are valid.",
            "format": "int64"
          },
          "extra_entropy": {
            "type": "string",
            "description": "The 32 byte string of extra random-ness to be added into the protocol's entropy pool.",
            "format": "byte",
            "nullable": true
          },
          "coins_per_utxo_size": {
            "type": "number",
            "description": "For Alonzo this is the cost per UTxO word. For Babbage and later per UTxO byte.",
            "format": "double",
            "nullable": true
          },
          "nonce_hex": {
            "type": "string",
            "description": "The nonce value for this epoch in hexadecimal form.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EpochStakeView": {
        "type": "object",
        "properties": {
          "epoch_stake_id": {
            "type": "integer",
            "description": "The epoch stake unique identifier.",
            "format": "int64",
            "nullable": true
          },
          "epoch_stake_amount": {
            "type": "number",
            "description": "The amount (in Lovelace) being staked.",
            "format": "double",
            "nullable": true
          },
          "epoch_stake_epoch_no": {
            "type": "integer",
            "description": "The epoch number.",
            "format": "int32",
            "nullable": true
          },
          "pool_hash": {
            "type": "string",
            "description": "The Bech32 encoding of the pool hash.",
            "nullable": true
          },
          "stake_address": {
            "type": "string",
            "description": "The Bech32 encoded version of the stake address hash.",
            "nullable": true
          },
          "stake_address_script_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the script hash, in case this address is locked by a script.",
            "nullable": true
          },
          "stake_address_id": {
            "type": "integer",
            "description": "The stake address unique identifier.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IEdmDirectValueAnnotationsManager": {
        "type": "object",
        "additionalProperties": false
      },
      "IEdmEntityContainer": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IEdmEntityContainerElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "schemaElementKind": {
            "$ref": "#/components/schemas/EdmSchemaElementKind"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IEdmEntityContainerElement": {
        "type": "object",
        "properties": {
          "containerElementKind": {
            "$ref": "#/components/schemas/EdmContainerElementKind"
          },
          "container": {
            "$ref": "#/components/schemas/IEdmEntityContainer"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IEdmExpression": {
        "type": "object",
        "properties": {
          "expressionKind": {
            "$ref": "#/components/schemas/EdmExpressionKind"
          }
        },
        "additionalProperties": false
      },
      "IEdmModel": {
        "type": "object",
        "properties": {
          "schemaElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IEdmSchemaElement"
            },
            "nullable": true,
            "readOnly": true
          },
          "vocabularyAnnotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IEdmVocabularyAnnotation"
            },
            "nullable": true,
            "readOnly": true
          },
          "referencedModels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IEdmModel"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredNamespaces": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "directValueAnnotationsManager": {
            "$ref": "#/components/schemas/IEdmDirectValueAnnotationsManager"
          },
          "entityContainer": {
            "$ref": "#/components/schemas/IEdmEntityContainer"
          }
        },
        "additionalProperties": false
      },
      "IEdmSchemaElement": {
        "type": "object",
        "properties": {
          "schemaElementKind": {
            "$ref": "#/components/schemas/EdmSchemaElementKind"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IEdmTerm": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/IEdmTypeReference"
          },
          "appliesTo": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "defaultValue": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "schemaElementKind": {
            "$ref": "#/components/schemas/EdmSchemaElementKind"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IEdmType": {
        "type": "object",
        "properties": {
          "typeKind": {
            "$ref": "#/components/schemas/EdmTypeKind"
          }
        },
        "additionalProperties": false
      },
      "IEdmTypeReference": {
        "type": "object",
        "properties": {
          "isNullable": {
            "type": "boolean",
            "readOnly": true
          },
          "definition": {
            "$ref": "#/components/schemas/IEdmType"
          }
        },
        "additionalProperties": false
      },
      "IEdmVocabularyAnnotatable": {
        "type": "object",
        "additionalProperties": false
      },
      "IEdmVocabularyAnnotation": {
        "type": "object",
        "properties": {
          "qualifier": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "term": {
            "$ref": "#/components/schemas/IEdmTerm"
          },
          "target": {
            "$ref": "#/components/schemas/IEdmVocabularyAnnotatable"
          },
          "value": {
            "$ref": "#/components/schemas/IEdmExpression"
          }
        },
        "additionalProperties": false
      },
      "MultiAssetTransactionMintDTO": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "The amount of the Multi Asset to mint (can be negative to \"burn\" assets).",
            "format": "double"
          },
          "policy_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the MultiAsset policy hash.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The MultiAsset name.",
            "nullable": true
          },
          "fingerprint": {
            "type": "string",
            "description": "The CIP14 fingerprint for the MultiAsset.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ODataEntitySetInfo": {
        "type": "object",
        "properties": {
          "typeAnnotation": {
            "$ref": "#/components/schemas/ODataTypeAnnotation"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ODataFunctionImportInfo": {
        "type": "object",
        "properties": {
          "typeAnnotation": {
            "$ref": "#/components/schemas/ODataTypeAnnotation"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ODataServiceDocument": {
        "type": "object",
        "properties": {
          "typeAnnotation": {
            "$ref": "#/components/schemas/ODataTypeAnnotation"
          },
          "entitySets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ODataEntitySetInfo"
            },
            "nullable": true
          },
          "singletons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ODataSingletonInfo"
            },
            "nullable": true
          },
          "functionImports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ODataFunctionImportInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ODataSingletonInfo": {
        "type": "object",
        "properties": {
          "typeAnnotation": {
            "$ref": "#/components/schemas/ODataTypeAnnotation"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ODataTypeAnnotation": {
        "type": "object",
        "properties": {
          "typeName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ParamProposal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The transaction unique identifier.",
            "format": "int64"
          },
          "epoch_no": {
            "type": "integer",
            "description": "The epoch for which this parameter proposal in intended to become active.",
            "format": "int32"
          },
          "key": {
            "type": "string",
            "description": "The hash of the crypto key used to sign this proposal.",
            "format": "byte",
            "nullable": true
          },
          "min_fee_a": {
            "type": "number",
            "description": "The 'a' parameter to calculate the minimum transaction fee.",
            "format": "double",
            "nullable": true
          },
          "min_fee_b": {
            "type": "number",
            "description": "The 'b' parameter to calculate the minimum transaction fee.",
            "format": "double",
            "nullable": true
          },
          "max_block_size": {
            "type": "number",
            "description": "The maximum block size (in bytes).",
            "format": "double",
            "nullable": true
          },
          "max_tx_size": {
            "type": "number",
            "description": "The maximum transaction size (in bytes).",
            "format": "double",
            "nullable": true
          },
          "max_bh_size": {
            "type": "number",
            "description": "The maximum block header size (in bytes).",
            "format": "double",
            "nullable": true
          },
          "key_deposit": {
            "type": "number",
            "description": "The amount (in Lovelace) require for a deposit to register a StakeAddress.",
            "format": "double",
            "nullable": true
          },
          "pool_deposit": {
            "type": "number",
            "description": "The amount (in Lovelace) require for a deposit to register a stake pool.",
            "format": "double",
            "nullable": true
          },
          "max_epoch": {
            "type": "number",
            "description": "The maximum number of epochs in the future that a pool retirement is allowed to be scheduled for.",
            "format": "double",
            "nullable": true
          },
          "optimal_pool_count": {
            "type": "number",
            "description": "The optimal number of stake pools.",
            "format": "double",
            "nullable": true
          },
          "influence": {
            "type": "number",
            "description": "The influence of the pledge on a stake pool's probability on minting a block.",
            "format": "double",
            "nullable": true
          },
          "monetary_expand_rate": {
            "type": "number",
            "description": "The monetary expansion rate.",
            "format": "double",
            "nullable": true
          },
          "treasury_growth_rate": {
            "type": "number",
            "description": "The treasury growth rate.",
            "format": "double",
            "nullable": true
          },
          "decentralisation": {
            "type": "number",
            "description": "The decentralisation parameter (1 fully centralised, 0 fully decentralised).",
            "format": "double",
            "nullable": true
          },
          "entropy": {
            "type": "string",
            "description": "The 32 byte string of extra random-ness to be added into the protocol's entropy pool.",
            "format": "byte",
            "nullable": true
          },
          "protocol_major": {
            "type": "integer",
            "description": "The protocol major number.",
            "format": "int32",
            "nullable": true
          },
          "protocol_minor": {
            "type": "integer",
            "description": "The protocol minor number.",
            "format": "int32",
            "nullable": true
          },
          "min_utxo_value": {
            "type": "number",
            "description": "The minimum value of a UTxO entry.",
            "format": "double",
            "nullable": true
          },
          "min_pool_cost": {
            "type": "number",
            "description": "The minimum pool cost.",
            "format": "double",
            "nullable": true
          },
          "cost_model_id": {
            "type": "integer",
            "description": "The CostModel table index for the proposal.",
            "format": "int64",
            "nullable": true
          },
          "price_mem": {
            "type": "number",
            "description": "The per word cost of script memory usage.",
            "format": "double",
            "nullable": true
          },
          "price_step": {
            "type": "number",
            "description": "The cost of script execution step usage.",
            "format": "double",
            "nullable": true
          },
          "max_tx_ex_mem": {
            "type": "number",
            "description": "The maximum number of execution memory allowed to be used in a single transaction.",
            "format": "double",
            "nullable": true
          },
          "max_tx_ex_steps": {
            "type": "number",
            "description": "The maximum number of execution steps allowed to be used in a single transaction.",
            "format": "double",
            "nullable": true
          },
          "max_block_ex_mem": {
            "type": "number",
            "description": "The maximum number of execution memory allowed to be used in a single block.",
            "format": "double",
            "nullable": true
          },
          "max_block_ex_steps": {
            "type": "number",
            "description": "The maximum number of execution steps allowed to be used in a single block.",
            "format": "double",
            "nullable": true
          },
          "max_val_size": {
            "type": "number",
            "description": "The maximum Val size.",
            "format": "double",
            "nullable": true
          },
          "collateral_percent": {
            "type": "integer",
            "description": "The percentage of the txfee which must be provided as collateral when including non-native scripts.",
            "format": "int32",
            "nullable": true
          },
          "max_collateral_inputs": {
            "type": "integer",
            "description": "The maximum number of collateral inputs allowed in a transaction.",
            "format": "int32",
            "nullable": true
          },
          "registered_tx_id": {
            "type": "integer",
            "description": "The Tx table index for the transaction that contains this parameter proposal.",
            "format": "int64"
          },
          "coins_per_utxo_size": {
            "type": "number",
            "description": "For Alonzo this is the cost per UTxO word. For Babbage and later per UTxO byte. New in v13: Renamed from coins_per_utxo_word.",
            "format": "double",
            "nullable": true
          },
          "key_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash of the crypto key used to sign this proposal.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PollDTO": {
        "type": "object",
        "properties": {
          "poll_hash": {
            "type": "string",
            "description": "The HEX encoding of the poll's question (e.g. the poll's hash).",
            "nullable": true
          },
          "question": {
            "type": "string",
            "description": "The the poll's question.",
            "nullable": true
          },
          "choices": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The the poll's possible answer choices.",
            "nullable": true
          },
          "tx_hash_hex": {
            "type": "string",
            "description": "The HEX encoding of the transaction that created the poll.",
            "nullable": true
          },
          "start_epoch_no": {
            "type": "integer",
            "description": "The epoch number marking the start of this poll.",
            "format": "int32"
          },
          "end_epoch_no": {
            "type": "integer",
            "description": "The epoch number marking the end of this poll.",
            "format": "int32"
          },
          "json": {
            "type": "string",
            "description": "The poll's on-chain JSON payload, containing questions and possible answers.",
            "nullable": true
          },
          "summary": {
            "$ref": "#/components/schemas/PollSummaryDTO"
          },
          "votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PollVotePubDTO"
            },
            "description": "The list of votes.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PollOverviewDTO": {
        "type": "object",
        "properties": {
          "poll_hash": {
            "type": "string",
            "description": "The HEX encoding of the poll's question (e.g. the poll's hash).",
            "nullable": true
          },
          "tx_hash_hex": {
            "type": "string",
            "description": "The HEX encoding of the transaction that created the poll.",
            "nullable": true
          },
          "start_epoch_no": {
            "type": "integer",
            "description": "The epoch number marking the start of this poll.",
            "format": "int32"
          },
          "end_epoch_no": {
            "type": "integer",
            "description": "The epoch number marking the end of this poll.",
            "format": "int32"
          },
          "json": {
            "type": "string",
            "description": "The poll's on-chain JSON payload, containing questions and possible answers.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PollSummaryDelegatorsDTO": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total voting delegators.",
            "format": "int32"
          },
          "sums": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Sums of voting delegators per choice.",
            "nullable": true
          },
          "pcts": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "Percentages of voting delegators per choice.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PollSummaryDTO": {
        "type": "object",
        "properties": {
          "votes": {
            "$ref": "#/components/schemas/PollSummaryVotesDTO"
          },
          "stakes": {
            "$ref": "#/components/schemas/PollSummaryStakesDTO"
          },
          "delegators": {
            "$ref": "#/components/schemas/PollSummaryDelegatorsDTO"
          }
        },
        "additionalProperties": false
      },
      "PollSummaryStakesDTO": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total voting stakes.",
            "format": "int64"
          },
          "sums": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Sums of voting stakes per choice.",
            "nullable": true
          },
          "pcts": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "Percentages of voting stakes per choice.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PollSummaryVotesDTO": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of votes.",
            "format": "int32"
          },
          "counts": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Counts of votes per choice.",
            "nullable": true
          },
          "pcts": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "float"
            },
            "description": "Percentages of votes per choice.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PollVotePubDTO": {
        "type": "object",
        "properties": {
          "ticker_name": {
            "type": "string",
            "description": "The pool's ticker name.",
            "nullable": true
          },
          "pool_name": {
            "type": "string",
            "description": "The pool's name.",
            "nullable": true
          },
          "pool_id": {
            "type": "string",
            "description": "The Bech32 encoding of the pool hash for the pool that cast this vote.",
            "nullable": true
          },
          "tx_hash_hex": {
            "type": "string",
            "description": "The HEX encoding of the transaction carrying this vote.",
            "nullable": true
          },
          "response": {
            "type": "string",
            "description": "The vote response string.",
            "nullable": true
          },
          "response_json": {
            "type": "string",
            "description": "The vote's JSON payload.",
            "nullable": true
          },
          "extra_sign_hash": {
            "type": "string",
            "description": "The HEX encoding of the extra signer hash attached to the vote transaction.",
            "nullable": true
          },
          "cold_vkey": {
            "type": "string",
            "description": "The hexadecimal encoding of the pool verification key hash for the pool that cast this vote.",
            "nullable": true
          },
          "delegator_count": {
            "type": "integer",
            "description": "The number of delegators currently delegating to this pool.",
            "format": "int32"
          },
          "delegated_stakes": {
            "type": "integer",
            "description": "The current delegated stakes for this pool (in Lovelace).",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "PoolHash": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The pool hash unique identifier.",
            "format": "int64"
          },
          "hash_raw": {
            "type": "string",
            "description": "The raw bytes of the pool hash.",
            "format": "byte",
            "nullable": true
          },
          "view": {
            "type": "string",
            "description": "The Bech32 encoding of the pool hash.",
            "nullable": true
          },
          "hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the pool hash.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PoolMetadata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The pool metadata ref unique identifier.",
            "format": "int64"
          },
          "pool_id": {
            "type": "integer",
            "description": "The PoolHash table index of the pool for this reference.",
            "format": "int64"
          },
          "url": {
            "type": "string",
            "description": "The URL for the location of the off-chain data.",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "description": "The expected hash for the off-chain data.",
            "format": "byte",
            "nullable": true
          },
          "registered_tx_id": {
            "type": "integer",
            "description": "The Tx table index of the transaction in which provided this metadata reference.",
            "format": "int64"
          },
          "hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the expected hash.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PoolOfflineData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The pool offline data unique identifier.",
            "format": "int64"
          },
          "pool_id": {
            "type": "integer",
            "description": "The PoolHash table index for the pool this offline data refers.",
            "format": "int64"
          },
          "ticker_name": {
            "type": "string",
            "description": "The pool's ticker name (as many as 5 characters).",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "description": "The hash of the offline data.",
            "format": "byte",
            "nullable": true
          },
          "json": {
            "type": "string",
            "description": "The payload as JSON.",
            "nullable": true
          },
          "bytes": {
            "type": "string",
            "description": "The raw bytes of the payload.",
            "format": "byte",
            "nullable": true
          },
          "pmr_id": {
            "type": "integer",
            "description": "The PoolMetadataRef table index for this offline data.",
            "format": "int64"
          },
          "hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the offline data hash.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PoolOfflineDataDTO": {
        "type": "object",
        "properties": {
          "ticker_name": {
            "type": "string",
            "description": "The pool's ticker name (as many as 5 characters).",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "The URL for the location of the off-chain data.",
            "nullable": true
          },
          "hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the offline data hash.",
            "nullable": true
          },
          "json": {
            "type": "string",
            "description": "The payload as JSON.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PoolOfflineFetchError": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The pool offline fetch error unique identifier.",
            "format": "int64"
          },
          "pool_id": {
            "type": "integer",
            "description": "The PoolHash table index for the pool this offline fetch error refers.",
            "format": "int64"
          },
          "fetch_time": {
            "type": "string",
            "description": "The UTC time stamp of the error.",
            "format": "date-time"
          },
          "pmr_id": {
            "type": "integer",
            "description": "The PoolMetadataRef table index for this offline data.",
            "format": "int64"
          },
          "fetch_error": {
            "type": "string",
            "description": "The text of the error.",
            "nullable": true
          },
          "retry_count": {
            "type": "integer",
            "description": "The number of retries.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PoolRelay": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The pool relay unique identifier.",
            "format": "int64"
          },
          "update_id": {
            "type": "integer",
            "description": "The PoolUpdate table index this PoolRelay entry refers to.",
            "format": "int64"
          },
          "ipv4": {
            "type": "string",
            "description": "The IPv4 address of the relay.",
            "nullable": true
          },
          "ipv6": {
            "type": "string",
            "description": "The IPv6 address of the relay.",
            "nullable": true
          },
          "dns_name": {
            "type": "string",
            "description": "The DNS name of the relay.",
            "nullable": true
          },
          "dns_srv_name": {
            "type": "string",
            "description": "The DNS service name of the relay.",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "description": "The port number of relay.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PoolRelayDTO": {
        "type": "object",
        "properties": {
          "ipv4": {
            "type": "string",
            "description": "The IPv4 address of the relay.",
            "nullable": true
          },
          "ipv6": {
            "type": "string",
            "description": "The IPv6 address of the relay.",
            "nullable": true
          },
          "dns_name": {
            "type": "string",
            "description": "The DNS name of the relay.",
            "nullable": true
          },
          "dns_srv_name": {
            "type": "string",
            "description": "The DNS service name of the relay.",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "description": "The port number of relay.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PoolStat": {
        "type": "object",
        "properties": {
          "epoch_no": {
            "type": "integer",
            "description": "The epoch number.",
            "format": "int32",
            "nullable": true
          },
          "pool_hash": {
            "type": "string",
            "description": "The Bech32 encoding of the pool hash.",
            "nullable": true
          },
          "tx_count": {
            "type": "integer",
            "description": "The transaction count.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PoolUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The pool update unique identifier.",
            "format": "int64"
          },
          "hash_id": {
            "type": "integer",
            "description": "The PoolHash table index of the pool this update refers to.",
            "format": "int64"
          },
          "cert_index": {
            "type": "integer",
            "description": "The index of this pool update within the certificates of this transaction.",
            "format": "int32"
          },
          "vrf_key_hash": {
            "type": "string",
            "description": "The hash of the pool's VRF key.",
            "format": "byte",
            "nullable": true
          },
          "pledge": {
            "type": "number",
            "description": "The amount (in Lovelace) the pool owner pledges to the pool.",
            "format": "double"
          },
          "active_epoch_no": {
            "type": "integer",
            "description": "The epoch number where this update becomes active.",
            "format": "int64"
          },
          "meta_id": {
            "type": "integer",
            "description": "The PoolMetadataRef table index this pool update refers to.",
            "format": "int64",
            "nullable": true
          },
          "margin": {
            "type": "number",
            "description": "The margin (as a percentage) this pool charges.",
            "format": "double"
          },
          "fixed_cost": {
            "type": "number",
            "description": "The fixed per epoch fee (in ADA) this pool charges.",
            "format": "double"
          },
          "registered_tx_id": {
            "type": "integer",
            "description": "The Tx table index of the transaction in which provided this pool update.",
            "format": "int64"
          },
          "reward_addr_id": {
            "type": "integer",
            "description": "The StakeAddress table index of this pool's rewards address. New in v13: Replaced reward_addr.",
            "format": "int64"
          },
          "vrf_key_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the VRF key hash.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RedeemerDTO": {
        "type": "object",
        "properties": {
          "unit_mem": {
            "type": "integer",
            "description": "The budget in Memory to run a script.",
            "format": "int64"
          },
          "unit_steps": {
            "type": "integer",
            "description": "The budget in Cpu steps to run a script.",
            "format": "int64"
          },
          "fee": {
            "type": "number",
            "description": "The budget in fees to run a script. The fees depend on the ExUnits and the current prices. Is null when --disable-ledger is enabled. New in v13: became nullable.",
            "format": "double",
            "nullable": true
          },
          "purpose": {
            "type": "string",
            "description": "What kind of validation this redeemer is used for. It can be one of 'spend', 'mint', 'cert', 'reward'.",
            "nullable": true
          },
          "index": {
            "type": "integer",
            "description": "The index of the redeemer pointer in the transaction.",
            "format": "int32"
          },
          "script_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the script hash this redeemer is used for.",
            "nullable": true
          },
          "hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the Plutus Data hash.",
            "nullable": true
          },
          "data_json": {
            "type": "string",
            "description": "The actual Plutus data in JSON format (detailed schema)",
            "nullable": true
          },
          "data_cbor": {
            "type": "string",
            "description": "The actual Plutus data in CBOR format",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The transaction unique identifier.",
            "format": "int64"
          },
          "hash": {
            "type": "string",
            "description": "The hash identifier of the transaction.",
            "format": "byte",
            "nullable": true
          },
          "block_id": {
            "type": "integer",
            "description": "The Block table index of the block that contains this transaction.",
            "format": "int64"
          },
          "block_index": {
            "type": "integer",
            "description": "The index of this transaction with the block (zero based).",
            "format": "int32"
          },
          "out_sum": {
            "type": "number",
            "description": "The sum of the transaction outputs (in Lovelace).",
            "format": "double"
          },
          "fee": {
            "type": "number",
            "description": "The fees paid for this transaction.",
            "format": "double"
          },
          "deposit": {
            "type": "integer",
            "description": "Deposit (or deposit refund) in this transaction. Deposits are positive, refunds negative.",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "description": "The size of the transaction in bytes.",
            "format": "int32"
          },
          "invalid_before": {
            "type": "number",
            "description": "Transaction in invalid before this slot number.",
            "format": "double",
            "nullable": true
          },
          "invalid_hereafter": {
            "type": "number",
            "description": "Transaction in invalid at or after this slot number.",
            "format": "double",
            "nullable": true
          },
          "valid_contract": {
            "type": "boolean",
            "description": "False if the contract is invalid. True if the contract is valid or there is no contract."
          },
          "script_size": {
            "type": "integer",
            "description": "The sum of the script sizes (in bytes) of scripts in the transaction.",
            "format": "int32"
          },
          "hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the transaction.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionAmountDTO": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "The Lovelace or Multi Asset denominated value of this input/output.",
            "format": "int64"
          },
          "unit": {
            "type": "string",
            "description": "Lovelace or name of the Multi Asset denominating this value.",
            "nullable": true
          },
          "asset_fingerprint": {
            "type": "string",
            "description": "The CIP14 fingerprint for the Multi Asset.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionDTO": {
        "type": "object",
        "properties": {
          "tx_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the transaction.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "The transaction unique identifier.",
            "format": "int64"
          },
          "block_no": {
            "type": "integer",
            "description": "The block number.",
            "format": "int32",
            "nullable": true
          },
          "slot_no": {
            "type": "integer",
            "description": "The slot number.",
            "format": "int64",
            "nullable": true
          },
          "block_time": {
            "type": "string",
            "description": "The block time (UTCTime).",
            "format": "date-time"
          },
          "block_index": {
            "type": "integer",
            "description": "The index of this transaction with the block (zero based).",
            "format": "int32"
          },
          "out_sum": {
            "type": "number",
            "description": "The sum of the transaction outputs (in Lovelace).",
            "format": "double"
          },
          "fee": {
            "type": "number",
            "description": "The fees paid for this transaction.",
            "format": "double"
          },
          "deposit": {
            "type": "integer",
            "description": "Deposit (or deposit refund) in this transaction. Deposits are positive, refunds negative.",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "description": "The size of the transaction in bytes.",
            "format": "int32"
          },
          "invalid_before": {
            "type": "number",
            "description": "Transaction in invalid before this slot number.",
            "format": "double",
            "nullable": true
          },
          "invalid_hereafter": {
            "type": "number",
            "description": "Transaction in invalid at or after this slot number.",
            "format": "double",
            "nullable": true
          },
          "valid_contract": {
            "type": "boolean",
            "description": "False if the contract is invalid. True if the contract is valid or there is no contract."
          },
          "script_size": {
            "type": "integer",
            "description": "The sum of the script sizes (in bytes) of scripts in the transaction.",
            "format": "int32"
          },
          "output_amounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionAmountDTO"
            },
            "description": "The list of transaction output amounts.",
            "nullable": true
          },
          "inputCount": {
            "type": "integer",
            "description": "The count of inputs in this transaction.",
            "format": "int32"
          },
          "outputCount": {
            "type": "integer",
            "description": "The count of outputs in this transaction.",
            "format": "int32"
          },
          "withdrawalCount": {
            "type": "integer",
            "description": "The count of withdrawals from a reward account in this transaction.",
            "format": "int32"
          },
          "assetMintCount": {
            "type": "integer",
            "description": "The count of Multi-Asset mint events in this transaction.",
            "format": "int32"
          },
          "metadataCount": {
            "type": "integer",
            "description": "The count of metadata attached to this transaction.",
            "format": "int32"
          },
          "stakeRegistrationCount": {
            "type": "integer",
            "description": "The count of stake address registration in this transaction.",
            "format": "int32"
          },
          "stakeDeregistrationCount": {
            "type": "integer",
            "description": "The count of stake address deregistration in this transaction.",
            "format": "int32"
          },
          "delegationCount": {
            "type": "integer",
            "description": "The count of delegation from a stake address to a stake pool in this transaction.",
            "format": "int32"
          },
          "treasuryCount": {
            "type": "integer",
            "description": "The count of payments from the treasury to a stake address in this transaction.",
            "format": "int32"
          },
          "reserveCount": {
            "type": "integer",
            "description": "The count of payments from the reserves to a stake address in this transaction.",
            "format": "int32"
          },
          "potTransferCount": {
            "type": "integer",
            "description": "The count of transfers between the reserves pot and the treasury pot in this transaction.",
            "format": "int32"
          },
          "paramProposalCount": {
            "type": "integer",
            "description": "The count of Cardano parameter change proposals in this transaction.",
            "format": "int32"
          },
          "poolRetireCount": {
            "type": "integer",
            "description": "The count of pool retirement notifications in this transaction.",
            "format": "int32"
          },
          "poolUpdateCount": {
            "type": "integer",
            "description": "The count of on-chain pool updates in this transaction.",
            "format": "int32"
          },
          "redeemerCount": {
            "type": "integer",
            "description": "The count of redeemers in this transaction.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TransactionInputDTO": {
        "type": "object",
        "properties": {
          "output_index": {
            "type": "integer",
            "description": "The index of this transaction output within the transaction.",
            "format": "int64"
          },
          "address": {
            "type": "string",
            "description": "The human readable encoding of the input address. Will be Base58 for Byron era addresses and Bech32 for Shelley era.",
            "nullable": true
          },
          "tx_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the transaction.",
            "nullable": true
          },
          "is_collateral": {
            "type": "boolean",
            "description": "Flag which shows if this input is a collateral consumed in case of a script validation failure."
          },
          "is_reference": {
            "type": "boolean",
            "description": "Flag which shows if this input is a reference transaction input."
          },
          "data_hash": {
            "type": "string",
            "description": "The hash of the transaction output datum. (NULL for Txs without scripts).",
            "nullable": true
          },
          "inline_datum_cbor": {
            "type": "string",
            "description": "The actual datum data in CBOR format.",
            "nullable": true
          },
          "reference_script_hash": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash of the reference script of the input.",
            "nullable": true
          },
          "amounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionAmountDTO"
            },
            "description": "The list of transaction amounts.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionMetadataDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "number",
            "description": "The metadata key (a Word64/unsigned 64 bit number).",
            "format": "double"
          },
          "json": {
            "type": "string",
            "description": "The JSON payload if it can be decoded as JSON.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionOutputDTO": {
        "type": "object",
        "properties": {
          "output_index": {
            "type": "integer",
            "description": "The index of this transaction output within the transaction.",
            "format": "int64"
          },
          "address": {
            "type": "string",
            "description": "The human readable encoding of the output address. Will be Base58 for Byron era addresses and Bech32 for Shelley era.",
            "nullable": true
          },
          "tx_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the transaction.",
            "nullable": true
          },
          "is_collateral": {
            "type": "boolean",
            "description": "Flag which shows if this output is a collateral output."
          },
          "data_hash": {
            "type": "string",
            "description": "The hash of the transaction output datum. (NULL for Txs without scripts).",
            "nullable": true
          },
          "inline_datum_cbor": {
            "type": "string",
            "description": "The actual datum data in CBOR format.",
            "nullable": true
          },
          "reference_script_hash": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash of the reference script of the output.",
            "nullable": true
          },
          "amounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionAmountDTO"
            },
            "description": "The list of transaction amounts.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionRetiringPoolDTO": {
        "type": "object",
        "properties": {
          "cert_index": {
            "type": "integer",
            "description": "The index of this pool retirement within the certificates of this transaction.",
            "format": "int32"
          },
          "pool_hash_bech32": {
            "type": "string",
            "description": "The Bech32 encoding of the pool hash.",
            "nullable": true
          },
          "pool_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the pool hash.",
            "nullable": true
          },
          "retiring_epoch": {
            "type": "integer",
            "description": "The epoch where this pool retires.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TransactionStakeAddressDelegationDTO": {
        "type": "object",
        "properties": {
          "cert_index": {
            "type": "integer",
            "description": "The index of this delegation within the certificates of this transaction.",
            "format": "int32"
          },
          "active_epoch_no": {
            "type": "integer",
            "description": "The epoch number where this delegation becomes active.",
            "format": "int64"
          },
          "stake_address": {
            "type": "string",
            "description": "The Bech32 encoded version of the stake address.",
            "nullable": true
          },
          "pool_hash_bech32": {
            "type": "string",
            "description": "The Bech32 encoding of the pool hash.",
            "nullable": true
          },
          "pool_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the pool hash.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionStakeAddressDTO": {
        "type": "object",
        "properties": {
          "cert_index": {
            "type": "integer",
            "description": "The index of this stake registration within the certificates of this transaction.",
            "format": "int32"
          },
          "epoch_no": {
            "type": "integer",
            "description": "The epoch in which the registration took place.",
            "format": "int32"
          },
          "stake_address": {
            "type": "string",
            "description": "The Bech32 encoded version of the stake address.",
            "nullable": true
          },
          "script_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the script hash, in case this address is locked by a script.",
            "nullable": true
          },
          "is_registration": {
            "type": "boolean",
            "description": "True if the transaction is a registration, False if it is a deregistration."
          }
        },
        "additionalProperties": false
      },
      "TransactionStakeAddressWithdrawalDTO": {
        "type": "object",
        "properties": {
          "stake_address": {
            "type": "string",
            "description": "The Bech32 encoded version of the stake address.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The withdrawal amount (in Lovelace).",
            "format": "double"
          },
          "redeemer_id": {
            "type": "integer",
            "description": "The Redeemer table index that is related with this withdrawal.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionTreasuryDTO": {
        "type": "object",
        "properties": {
          "cert_index": {
            "type": "integer",
            "description": "The index of this payment certificate within the certificates of this transaction.",
            "format": "int32"
          },
          "stake_address": {
            "type": "string",
            "description": "The Bech32 encoded version of the stake address.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The treasury payment amount (in Lovelace).",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "TransactionUpdatingPoolDTO": {
        "type": "object",
        "properties": {
          "cert_index": {
            "type": "integer",
            "description": "The index of this pool update within the certificates of this transaction.",
            "format": "int32"
          },
          "pool_hash_bech32": {
            "type": "string",
            "description": "The Bech32 encoding of the pool hash.",
            "nullable": true
          },
          "pool_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the pool hash.",
            "nullable": true
          },
          "vrf_key_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the VRF key hash.",
            "nullable": true
          },
          "reward_addr_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the pool reward address hash.",
            "nullable": true
          },
          "pledge": {
            "type": "number",
            "description": "The amount (in Lovelace) the pool owner pledges to the pool.",
            "format": "double"
          },
          "margin": {
            "type": "number",
            "description": "The margin (as a percentage) this pool charges.",
            "format": "double"
          },
          "fixed_cost": {
            "type": "number",
            "description": "The fixed per epoch fee (in ADA) this pool charges.",
            "format": "double"
          },
          "active_epoch_no": {
            "type": "integer",
            "description": "The epoch number where this update becomes active.",
            "format": "int64"
          },
          "owners_addresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of pool owners stake addresses.",
            "nullable": true
          },
          "relays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoolRelayDTO"
            },
            "description": "The pool relays updates.",
            "nullable": true
          },
          "offline_data": {
            "$ref": "#/components/schemas/PoolOfflineDataDTO"
          }
        },
        "additionalProperties": false
      },
      "TransactionUtxoDTO": {
        "type": "object",
        "properties": {
          "tx_hash_hex": {
            "type": "string",
            "description": "The hexadecimal encoding of the hash identifier of the transaction.",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "The transaction unique identifier.",
            "format": "int64"
          },
          "slot_no": {
            "type": "integer",
            "description": "The slot number.",
            "format": "int64",
            "nullable": true
          },
          "block_no": {
            "type": "integer",
            "description": "The block number.",
            "format": "int32",
            "nullable": true
          },
          "block_time": {
            "type": "string",
            "description": "The block time (UTCTime).",
            "format": "date-time"
          },
          "block_index": {
            "type": "integer",
            "description": "The index of this transaction with the block (zero based).",
            "format": "int32"
          },
          "out_sum": {
            "type": "number",
            "description": "The sum of the transaction outputs (in Lovelace).",
            "format": "double"
          },
          "fee": {
            "type": "number",
            "description": "The fees paid for this transaction.",
            "format": "double"
          },
          "deposit": {
            "type": "integer",
            "description": "Deposit (or deposit refund) in this transaction. Deposits are positive, refunds negative.",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "description": "The size of the transaction in bytes.",
            "format": "int32"
          },
          "invalid_before": {
            "type": "number",
            "description": "Transaction in invalid before this slot number.",
            "format": "double",
            "nullable": true
          },
          "invalid_hereafter": {
            "type": "number",
            "description": "Transaction in invalid at or after this slot number.",
            "format": "double",
            "nullable": true
          },
          "valid_contract": {
            "type": "boolean",
            "description": "False if the contract is invalid. True if the contract is valid or there is no contract."
          },
          "script_size": {
            "type": "integer",
            "description": "The sum of the script sizes (in bytes) of scripts in the transaction.",
            "format": "int32"
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionOutputDTO"
            },
            "description": "The list of transaction outputs.",
            "nullable": true
          },
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionInputDTO"
            },
            "description": "The list of transaction inputs.",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "oauth2",
        "description": "JWT Authorization header using the Bearer scheme."
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}